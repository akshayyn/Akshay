/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package UserInterface.SystemAdminWorkArea;

import Business.EcoSystem;
import Business.Organization.Organization;
import static Business.Organization.Organization.Type.Citizen;
import Business.UserAccount.UserAccount;
import Citizen.Citizen;
import business.Area.Area;
import business.City.City;
import businessLogic.formValidation.FormValidator;
import java.awt.CardLayout;
import java.awt.Component;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Akshay
 */
public class ManageCityJPanel extends javax.swing.JPanel {

    private JPanel userProcessContainer;
    private EcoSystem system;

    /**
     *
     * Creates new form ManageNetworkJPanel
     */
    public ManageCityJPanel(JPanel userProcessContainer, EcoSystem system) {
        initComponents();

        this.userProcessContainer = userProcessContainer;
        this.system = system;
        changeVisiblity(false);
        populateNetworkTable();
        populateCitizenCombo();
    }
    
    public void populateCitizenCombo(){
        citizenCombo.removeAllItems();
        for(City city : system.getCityList()){
            for(Area area : city.getAreaDirectory().getAreaList()){
                for(Citizen citizen : area.getCitizenDirectory().getCitizenList()){
                    citizenCombo.addItem(citizen);
                }
            }
        }
        
    }
     public void changeVisiblity(boolean flag) {
        userLabel.setVisible(flag);
        userNameField.setVisible(flag);
        passLabel.setVisible(flag);
        passwordField.setVisible(flag);
        citizenCombo.setVisible(flag);
        citizenLabel.setVisible(flag);
    }
    private void populateNetworkTable() {
        DefaultTableModel model = (DefaultTableModel) networkJTable.getModel();

        model.setRowCount(0);
        for (City city : system.getCityList()) {
            Object[] row = new Object[1];
            row[0] = city;
            model.addRow(row);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        networkJTable = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        submitJButton = new javax.swing.JButton();
        nameJTextField = new javax.swing.JTextField();
        backJButton = new javax.swing.JButton();
        processButton = new javax.swing.JButton();
        userLabel = new javax.swing.JLabel();
        userNameField = new javax.swing.JTextField();
        passLabel = new javax.swing.JLabel();
        passwordField = new javax.swing.JTextField();
        jButton2 = new javax.swing.JButton();
        citizenLabel = new javax.swing.JLabel();
        citizenCombo = new javax.swing.JComboBox();
        jLabel2 = new javax.swing.JLabel();

        networkJTable.setFont(new java.awt.Font("Verdana", 0, 11)); // NOI18N
        networkJTable.setForeground(new java.awt.Color(0, 102, 153));
        networkJTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null},
                {null},
                {null},
                {null}
            },
            new String [] {
                "Name"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(networkJTable);
        if (networkJTable.getColumnModel().getColumnCount() > 0) {
            networkJTable.getColumnModel().getColumn(0).setResizable(false);
        }

        jLabel1.setFont(new java.awt.Font("Verdana", 0, 11)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(0, 102, 153));
        jLabel1.setText("Name");

        submitJButton.setFont(new java.awt.Font("Verdana", 0, 11)); // NOI18N
        submitJButton.setForeground(new java.awt.Color(0, 102, 153));
        submitJButton.setText("Submit");
        submitJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                submitJButtonActionPerformed(evt);
            }
        });

        backJButton.setFont(new java.awt.Font("Verdana", 0, 11)); // NOI18N
        backJButton.setForeground(new java.awt.Color(0, 102, 153));
        backJButton.setText("<< Back");
        backJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backJButtonActionPerformed(evt);
            }
        });

        processButton.setFont(new java.awt.Font("Verdana", 0, 11)); // NOI18N
        processButton.setForeground(new java.awt.Color(0, 102, 153));
        processButton.setText("Add Mayor User Account");
        processButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                processButtonActionPerformed(evt);
            }
        });

        userLabel.setFont(new java.awt.Font("Verdana", 0, 11)); // NOI18N
        userLabel.setForeground(new java.awt.Color(0, 102, 153));
        userLabel.setText("UserName");

        userNameField.setFont(new java.awt.Font("Verdana", 0, 11)); // NOI18N
        userNameField.setForeground(new java.awt.Color(0, 102, 153));
        userNameField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                userNameFieldActionPerformed(evt);
            }
        });

        passLabel.setFont(new java.awt.Font("Verdana", 0, 11)); // NOI18N
        passLabel.setForeground(new java.awt.Color(0, 102, 153));
        passLabel.setText("Password");

        passwordField.setFont(new java.awt.Font("Verdana", 0, 11)); // NOI18N
        passwordField.setForeground(new java.awt.Color(0, 102, 153));

        jButton2.setFont(new java.awt.Font("Verdana", 0, 11)); // NOI18N
        jButton2.setForeground(new java.awt.Color(0, 102, 153));
        jButton2.setText("Assign User Account");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        citizenLabel.setFont(new java.awt.Font("Verdana", 0, 11)); // NOI18N
        citizenLabel.setForeground(new java.awt.Color(0, 102, 153));
        citizenLabel.setText("Citizen");

        citizenCombo.setFont(new java.awt.Font("Verdana", 0, 11)); // NOI18N
        citizenCombo.setForeground(new java.awt.Color(0, 102, 153));
        citizenCombo.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jLabel2.setFont(new java.awt.Font("Verdana", 1, 18)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(0, 153, 204));
        jLabel2.setText("Manage Cities");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(104, 104, 104)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(processButton)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(91, 91, 91)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(userLabel)
                                    .addComponent(passLabel)
                                    .addComponent(citizenLabel))
                                .addGap(50, 50, 50)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(passwordField, javax.swing.GroupLayout.PREFERRED_SIZE, 151, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(userNameField, javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(citizenCombo, javax.swing.GroupLayout.Alignment.LEADING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(backJButton)
                                .addGap(79, 79, 79)
                                .addComponent(jButton2))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addGap(18, 18, 18)
                                .addComponent(nameJTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(submitJButton))
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 404, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(49, 49, 49)
                        .addComponent(jLabel2)))
                .addGap(69, 69, 69))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2)
                .addGap(53, 53, 53)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(nameJTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(submitJButton))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(processButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(citizenLabel)
                    .addComponent(citizenCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(13, 13, 13)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(userNameField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(userLabel))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(passLabel)
                    .addComponent(passwordField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(46, 46, 46)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(backJButton)
                    .addComponent(jButton2))
                .addGap(30, 30, 30))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void submitJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_submitJButtonActionPerformed

        String name = nameJTextField.getText();

        City city = system.createAndAddCity(name);
        city.setName(name);
        
        populateNetworkTable();
    }//GEN-LAST:event_submitJButtonActionPerformed
    
    private void backJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backJButtonActionPerformed
        userProcessContainer.remove(this);
         Component[] componentArray = userProcessContainer.getComponents();
        Component component = componentArray[componentArray.length - 1];
        SystemAdminWorkAreaJPanel sysAdminwjp = (SystemAdminWorkAreaJPanel) component;
        sysAdminwjp.populateTree();
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.previous(userProcessContainer);
    }//GEN-LAST:event_backJButtonActionPerformed

    private void processButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_processButtonActionPerformed
        City city = null;
        int selectedRow = networkJTable.getSelectedRow();
        if (selectedRow < 0) {
            JOptionPane.showMessageDialog(null, "Please select a row");
        } else {
            
            city = (City) networkJTable.getValueAt(selectedRow, 0);
            changeVisiblity(true);
            userNameField.setText(city.getName()+"_Mayor");

        }
    }//GEN-LAST:event_processButtonActionPerformed
    
    private void userNameFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_userNameFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_userNameFieldActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        City city = null;
        String userName = userNameField.getText();
        String password = passwordField.getText();
        int selectedRow = networkJTable.getSelectedRow();
        if (selectedRow < 0) {
            JOptionPane.showMessageDialog(null, "Please select a row");
        } else {
            FormValidator fv = new FormValidator();
            if(fv.verifyStringInput(password) &&
                    fv.verifyStringInput(userName)&&
                    null !=citizenCombo.getSelectedItem()&&
                    (citizenCombo.getSelectedItem() instanceof Citizen)){
            city = (City) networkJTable.getValueAt(selectedRow, 0);
            Citizen citizen = (Citizen)citizenCombo.getSelectedItem();
            ArrayList<UserAccount> userAcoountList = new ArrayList<>();
            for (Area area : city.getAreaDirectory().getAreaList()) {
                for (Organization org : area.getOrganizationDirectory().getOrganizationList()) {
                    userAcoountList.addAll(org.getUserAccountDirectory().getUserAccountList());
                }
            }

            for (UserAccount ua : userAcoountList) {
                /**if(ua.getCitizen().getCitizenId() == citizen.getCitizenId()){
                    JOptionPane.showMessageDialog(null, "Already an user Account present");
                }*/
                if (ua.getUsername().equals(userName)) {
                    JOptionPane.showMessageDialog(null, "UserName already taken");
                    return;
                }
            }
            city.getUserAccountDirectory().createUserAccount(userName, password, null, citizen, city.getSupportedRole().get(0));
            DefaultTableModel model = (DefaultTableModel) networkJTable.getModel();
            model.removeRow(selectedRow);
            populateNetworkTable();
                changeVisiblity(false);
            JOptionPane.showMessageDialog(null, "User Account created Successfully!");
            }else{
                JOptionPane.showMessageDialog(null, "Fill form");
            }
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton backJButton;
    private javax.swing.JComboBox citizenCombo;
    private javax.swing.JLabel citizenLabel;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField nameJTextField;
    private javax.swing.JTable networkJTable;
    private javax.swing.JLabel passLabel;
    private javax.swing.JTextField passwordField;
    private javax.swing.JButton processButton;
    private javax.swing.JButton submitJButton;
    private javax.swing.JLabel userLabel;
    private javax.swing.JTextField userNameField;
    // End of variables declaration//GEN-END:variables
}
